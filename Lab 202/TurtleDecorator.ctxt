#BlueJ class context
comment0.target=TurtleDecorator
comment0.text=\r\n\ A\ utility\ class\ to\ help\ write\ decorator\ subtypes\ of\ {@code\ Turtle}.\ Implements\r\n\ the\ logic\ of\ having\ underlying\ turtle\ and\ redirects\ all\ method\ calls\ to\ it.\ Subclasses\r\n\ of\ this\ class\ {@code\ TurtleDecorator}\ should\ override\ the\ appropriate\ methods\ to\ perform\r\n\ whatever\ additional\ computations\ to\ do,\ and\ call\ the\ superclass\ version\ of\ that\r\n\ method.\ The\ underlying\ turtle\ can\ also\ be\ accessed\ directly\ through\ the\ {@code\ protected}\r\n\ field\ {@code\ turtle},\ should\ the\ subclass\ methods\ need\ that.\r\n\ @author\ Ilkka\ Kokkarinen\r\n
comment1.params=
comment1.target=Turtle\ getTurtle()
comment1.text=\r\n\ Accessor\ method\ to\ get\ the\ underlying\ turtle\ of\ this\ decorator.\r\n\ @return\ The\ underlying\ turtle\ of\ this\ decorator.\r\n
comment10.params=
comment10.target=double\ getHeading()
comment10.text=\r\n\ Get\ the\ absolute\ heading\ of\ the\ underlying\ turtle.\r\n\ @return\ The\ absolute\ heading\ of\ the\ absolute\ position\ of\ the\ underlying\ turtle.\r\n
comment11.params=up
comment11.target=void\ setPen(boolean)
comment11.text=\r\n\ Set\ the\ state\ of\ the\ pen.\ When\ the\ pen\ is\ down,\ the\ turtle\ leaves\r\n\ some\ kind\ of\ drawing\ behind\ its\ movement,\ and\ when\ the\ pen\ is\ up,\r\n\ the\ turtle\ moves\ without\ drawing\ anything.\r\n\ @param\ down\ Whether\ the\ pen\ is\ currently\ down.\r\n
comment12.params=
comment12.target=boolean\ getPen()
comment12.text=\r\n\ Get\ the\ current\ state\ of\ the\ pen.\ When\ the\ pen\ is\ down,\ the\ turtle\r\n\ leaves\ some\ kind\ of\ drawing\ behind\ its\ movement,\ and\ when\ the\ pen,\r\n\ is\ up\ the\ turtle\ moves\ without\ drawing\ anything.\r\n\ @return\ Whether\ the\ pen\ is\ currently\ down.\r\n
comment13.params=color
comment13.target=void\ setColor(java.awt.Color)
comment13.text=\r\n\ Set\ the\ current\ drawing\ color\ to\ use\ in\ drawing\ when\ the\ pen\ is\ down.\r\n\ @param\ color\ The\ current\ drawing\ color\ to\ use.\r\n
comment14.params=
comment14.target=java.awt.Color\ getColor()
comment14.text=\r\n\ Get\ the\ current\ drawing\ color\ to\ use\ in\ drawing\ when\ the\ pen\ is\ down.\r\n\ @return\ The\ current\ drawing\ color\ to\ use.\r\n
comment15.params=stroke
comment15.target=void\ setStroke(java.awt.Stroke)
comment15.text=\r\n\ Set\ the\ current\ stroke\ to\ be\ used\ in\ drawing\ when\ the\ pen\ is\ down.\r\n\ @param\ stroke\ The\ current\ stroke\ to\ use\ in\ drawing.\r\n
comment16.params=
comment16.target=java.awt.Stroke\ getStroke()
comment16.text=\r\n\ Get\ the\ current\ stroke\ to\ be\ used\ in\ drawing\ when\ the\ pen\ is\ down.\r\n\ @return\ The\ current\ stroke\ to\ use\ in\ drawing.\r\n
comment17.params=dist
comment17.target=void\ move(double)
comment17.text=\r\n\ Move\ the\ underlying\ turtle\ forward\ the\ given\ distance.\r\n\ @param\ dist\ The\ distance\ to\ move\ forward.\r\n
comment18.params=turnAngle
comment18.target=void\ turn(double)
comment18.text=\r\n\ Turn\ the\ underlying\ turtle\ in\ place\ the\ given\ angle,\ measured\ in\ degrees.\r\n\ Positive\ angle\ turns\ the\ turtle\ left,\ while\ a\ negative\ angle\ turns\ it\ right.\r\n\ @param\ turnAngle\ The\ angle\ to\ turn.\r\n
comment2.params=turtle
comment2.target=TurtleDecorator(Turtle)
comment2.text=\r\n\ The\ constructor\ to\ place\ the\ decorator\ in\ front\ of\ the\ underlying\ turtle.\r\n\ @param\ turtle\ The\ underlying\ turtle\ that\ is\ being\ decorated.\r\n
comment3.params=turtle
comment3.target=void\ setTurtle(Turtle)
comment3.text=\r\n\ Slightly\ against\ the\ spirit\ of\ decorators,\ we\ allow\ the\ underlying\ turtle\r\n\ to\ be\ changed\ later.\r\n\ @param\ turtle\ The\ new\ underlying\ turtle\ that\ is\ being\ decorated.\r\n
comment4.params=g2
comment4.target=void\ setGraphics2D(java.awt.Graphics2D)
comment4.text=\r\n\ Set\ the\ {@code\ Graphics2D}\ object\ that\ the\ underlying\ turtle\ draws\ on.\r\n\ @param\ g\ The\ {@code\ Graphics2D}\ object\ that\ the\ underlying\ turtle\ draws\ on.\r\n
comment5.params=
comment5.target=java.awt.Graphics2D\ getGraphics2D()
comment5.text=\r\n\ Get\ the\ {@code\ Graphics2D}\ object\ that\ the\ underlying\ turtle\ draws\ on.\r\n\ @return\ The\ {@code\ Graphics2D}\ object\ that\ the\ underlying\ turtle\ draws\ on.\r\n
comment6.params=x\ y
comment6.target=void\ setPosition(double,\ double)
comment6.text=\r\n\ Set\ the\ absolute\ position\ of\ the\ underlying\ turtle.\r\n\ @param\ x\ The\ x-coordinate\ of\ the\ absolute\ position.\r\n\ @param\ y\ The\ y-coordinate\ of\ the\ absolute\ position.\r\n
comment7.params=angle
comment7.target=void\ setHeading(double)
comment7.text=\r\n\ Set\ the\ absolute\ heading\ of\ the\ underlying\ turtle.\r\n\ @param\ angle\ The\ absolute\ heading\ angle\ of\ the\ turtle,\ expressed\ in\ degrees\r\n\ with\ 0\ pointing\ right\ and\ 90\ pointing\ up.\r\n
comment8.params=
comment8.target=double\ getX()
comment8.text=\r\n\ Get\ the\ x-coordinate\ of\ the\ absolute\ position\ of\ the\ underlying\ turtle.\r\n\ @return\ The\ x-coordinate\ of\ the\ absolute\ position\ of\ the\ underlying\ turtle.\r\n
comment9.params=
comment9.target=double\ getY()
comment9.text=\r\n\ Get\ the\ y-coordinate\ of\ the\ absolute\ position\ of\ the\ underlying\ turtle.\r\n\ @return\ The\ y-coordinate\ of\ the\ absolute\ position\ of\ the\ underlying\ turtle.\r\n
numComments=19
